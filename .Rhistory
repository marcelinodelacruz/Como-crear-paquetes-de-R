summary(test.abundances$FT)
sum(test.abundances$FT == 0)
test.abundances <- subset(test.abundances, replicate < i.replicate)
summary(test.abundances$FT)
sum(test.abundances$FT == 0)
min(test.abundances$FT)
n.time.steps <- 2500
n.replicates <- 5000
time.steps <- seq(0,n.time.steps,1)
r_SP_min <- 0.4
r_SP_max <- 0.75
m_SP_min <- 0.0005
m_SP_max <- 0.0015
initial.abundances <- c(N_SP = 200)
test.abundances <- data.frame(replicate = 1:n.replicates,SP = 0)
test.model <- function(time.steps, initial.abundances, param.list){
with(as.list(c(initial.abundances, param.list)),{
d_SP <- (r_SP * N_SP) - (m_SP * N_SP^2)
list(c(d_SP))
})
}
for(i.replicate in 1:n.replicates){
r_SP <- runif(1,r_SP_min,r_SP_max)
m_SP <- runif(1,m_SP_min,m_SP_max)
param.list <- c(r_SP,
m_SP)
test.dynamics <- ode(y = initial.abundances,times = time.steps,func = test.model,parms = param.list)
test.abundances[i.replicate,2] <- test.dynamics[nrow(test.dynamics),2]
}
summary(test.abundances$SP)
n.time.steps <- 2500
n.replicates <- 5000
time.steps <- seq(0,n.time.steps,1)
r_SP_min <- 0.15
r_SP_max <- 0.55
m_SP_min <- 0.00005
m_SP_max <- 0.00015
initial.abundances <- c(N_SP = 200)
test.abundances <- data.frame(replicate = 1:n.replicates,SP = 0)
test.model <- function(time.steps, initial.abundances, param.list){
with(as.list(c(initial.abundances, param.list)),{
d_SP <- (r_SP * N_SP) - (m_SP * N_SP^2)
list(c(d_SP))
})
}
for(i.replicate in 1:n.replicates){
r_SP <- runif(1,r_SP_min,r_SP_max)
m_SP <- runif(1,m_SP_min,m_SP_max)
param.list <- c(r_SP,
m_SP)
test.dynamics <- ode(y = initial.abundances,times = time.steps,func = test.model,parms = param.list)
test.abundances[i.replicate,2] <- test.dynamics[nrow(test.dynamics),2]
}
summary(test.abundances$SP)
sum(test.abundances$SP == 0)
min(test.abundances$SP)
max(test.abundances$SP)
#options(width=80)
knitr::opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
# number of species
num.sp <- 40
# number of discrete trophic levels
trophic.levels <- 4
# SAD parameters
abundance.distribution <- "gambin"
gambin.alpha <- 2
gambin.maxoctave <- 8
# include abundance scaling with trophic level
scaling.law.tl <- TRUE
# with exponent 3/4
scaling.exponent.tl <- 0.75
# aggregated abundance of the basal trophic level, necessary for the scaling
basal.abundance <- num.sp * 100
trophic.level.abundance <- numeric(trophic.levels)
trophic.level.abundance[1] <- basal.abundance
# calculate abundance for each trophic level
# including a white noise term with mean = 0 and sd = abundance/10
if(length(trophic.level.abundance) > 1){
for(i.trophic.level in 2:trophic.levels){
trophic.level.abundance[i.trophic.level] <-
trophic.level.abundance[i.trophic.level - 1]^scaling.exponent.tl
trophic.level.abundance[i.trophic.level] <-
trophic.level.abundance[i.trophic.level] +
rnorm(n = 1,mean = 0,sd = trophic.level.abundance[i.trophic.level]/10)
}
}
round(trophic.level.abundance)
abundance.list <- DGC::GenerateProbNumbers(times = num.sp,
dist = abundance.distribution,
cum.sum = sum(trophic.level.abundance),
gambin.alpha = gambin.alpha,
gambin.maxoctave = gambin.maxoctave)
abundance.list
plot(sort(abundance.list,decreasing = TRUE),ylab = "abundance",xlab = "")
0.05/1e-4
0.05/1e-5
#options(width=80)
knitr::opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
interactions.table <- readr::read_delim(file = "/home/david/CREAF/FPU/network_model/data/interactions_literature_review_v1.csv",delim = ";")
head(interactions.table)
install.packages("kableExtra")
library(kableExtra)
?column_spec
head(interactions.table)
getwd()
head(interactions.table)
ls
library(shiny); source('Downloads/muxViz-master/muxViz-master/muxVizGUI.R')
source("SME_InteractionTopology.R")
source('~/Work/Projects/CREAF/FPU/SME/SME_main_script.R', echo=TRUE)
library(ggplot2)
# change
lambda.values <- read.csv2("/home/david/Work/Projects/EBD/temp/lambda_values.csv")
head(lambda)
head(lambda.values)
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(model~.)+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(.~model)+
NULL
lambda.plot
str(lambda.values)
# change
lambda.values <- read.csv2("/home/david/Work/Projects/EBD/temp/lambda_values.csv",stringsAsFactors = FALSE)
head(lambda.values)
str(lambda.values)
lambda.values$lambda <- as.numeric(lambda.values$lambda)
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(.~model)+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(y = species, x = lambda)) +
facet_grid(.~model)+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(y = species, x = lambda)) +
facet_grid(model~.)+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
facet_grid(~model)+
NULL
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=90, vjust=0.5))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=0.5))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size = 10))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size = 5))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size = 8))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size = 7))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size = 6))+
NULL
lambda.plot
pdf(file = "/home/david/Work/Projects/EBD/temp/lambda_values.pdf",width = 7,height = 6)
lambda.plot
dev.off()
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=1.5, size = 6))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, hjust=0.5, size = 6))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size = 6))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, hjust = 0.5, vjust=0.5, size = 6))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, hjust = 1.5, vjust=0.5, size = 6))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, hjust = 1, vjust=0.5, size = 6))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, hjust = 1, vjust=0, size = 6))+
NULL
lambda.plot
# I use ggplot2, which has a syntax in which you add "layers" to a plot sequentially
lambda.plot <- ggplot(lambda.values) +
geom_point(aes(x = species, y = lambda)) +
facet_grid(~model)+
theme(axis.text.x  = element_text(angle=45, hjust = 1, vjust=1, size = 6))+
NULL
lambda.plot
pdf(file = "/home/david/Work/Projects/EBD/temp/lambda_values.pdf",width = 7,height = 6)
lambda.plot
dev.off()
install.packages("blogdown")
# open projection file
proj <- read.csv2("/home/david/Work/Projects/EBD/cxr_predictions/pred_abundancia_1.csv",header = T,stringsAsFactors = F)
head(proj)
# original file
obs <- read.csv2("/home/david/Work/Projects/EBD/Caracoles/data/abundances.csv",header = T,stringsAsFactors = F)
head(obs)
obs <- obs[,c("year","species","plot","subplot","individuals")]
library(tidyverse)
combined <- left_join(proj,obs)
head(combined)
# original file
obs <- read.csv2("/home/david/Work/Projects/EBD/Caracoles/training_data/abundances_training.csv",header = T,stringsAsFactors = F)
head(obs)
# original file
obs <- read.csv2("/home/david/Work/Projects/EBD/Caracoles/training_data/abundances_training.csv",header = T,stringsAsFactors = F)
obs <- read.csv2("/home/david/Work/Projects/EBD/Caracoles/data/abundances.csv",header = T,stringsAsFactors = F)
# open projection file
proj <- read.csv2("/home/david/Work/Projects/EBD/cxr_predictions/pred_abundancia_1.csv",header = T,stringsAsFactors = F)
# original file
training <- read.csv2("/home/david/Work/Projects/EBD/Caracoles/training_data/abundances_training.csv",header = T,stringsAsFactors = F)
obs <- read.csv2("/home/david/Work/Projects/EBD/Caracoles/data/abundances.csv",header = T,stringsAsFactors = F)
obs <- obs[,c("year","plot","subplot","species","individuals")]
head(training)
head(obs)
training.na <- training[which(is.na(training$individuals)),]
head(training.na)
names(training.na)[5] <- "na_col"
na.individuals <- left_join(training.na,obs)
head(na.individuals)
obs.pred <- left_join(na.individuals,proj)
head(obs.pred)
RMSE = function(m, o){
sqrt(mean((m - o)^2))
}
RMSE(obs.pred$individuals,obs.pred$Prediccion)
summary(obs.pred)
summary(na.individuals)
summary(obs$individuals)
table(obs$year)
table(training$year)
head(na.individuals[which(is.na(na.individuals$individuals)),])
head(obs.pred[which(is.na(obs.pred$individuals)),])
tt <- obs.pred[which(is.na(obs.pred$individuals)),]
table(tt$species)
# individuals of SUSP were not observed, and appear as NA. Change to zero
na.individuals$individuals[which(is.na(na.individuals$individuals))] <- 0
obs.pred <- left_join(na.individuals,proj)
summary(obs.pred)
RMSE(obs.pred$individuals,obs.pred$Prediccion)
MAE = function(m,o){
mean(abs(m-0))
}
MAE(obs.pred$individuals,obs.pred$Prediccion)
rsq <- function (m, o) cor(m, o) ^ 2
rsq(obs.pred$individuals,obs.pred$Prediccion)
rmse.plot <- ggplot(obs.pred,aes(x = individuals, y = Prediccion)) +
geom_point()+
NULL
rmse.plot
RMSE = function(m, o){
sqrt(mean((m - o)^2))
}
RRMSE <- function(m,o){
sqrt(mean((m-o)^2)) / (max(o)-min(o) )
}
MAE = function(m,o){
mean(abs(m-0))
}
rsq <- function (m, o) cor(m, o) ^ 2
RMSE(obs.pred$individuals,obs.pred$Prediccion)
# o is observed for Relative RMSE
RRMSE(m = obs.pred$Prediccion,o = obs.pred$individuals)
MAE(obs.pred$individuals,obs.pred$Prediccion)
rsq(obs.pred$individuals,obs.pred$Prediccion)
tesaurus <- data.frame(plot = c(1:9),
add.x = c(0, 33, 45, 21, 23, 20, 91, 39, 40),
add.y = c(0, 26, 28, 91, 7, 2, 133, -19, 16))
tesauros
tesaurus
plot(tesaurus$add.x,tesaurus$add.y)
library(ggplot2)
plots <- ggplot(tesaurus,aes(x = add.x,y = add.y))+
geom_point()+
geom_label(aes(plot))+
NULL
plots
plots <- ggplot(tesaurus,aes(x = add.x,y = add.y))+
geom_point()+
geom_label(aes(label = plot))+
NULL
plots
tesaurus <- data.frame(plot = c(1:9),
add.x = c(0, 33, 45, 21, 23, 20, 91, 39, 40),
add.y = c(0, 26, 28, 91, 7, 2, 133, -19, 16))
tesaurus$cumulative_x <- cumsum(tesaurus$add.x)
tesaurus$cumulative_y <- cumsum(tesaurus$add.y)
tesaurus
plots <- ggplot(tesaurus,aes(x = cumulative_x = cumulative_y))+
geom_point()+
geom_label(aes(label = plot))+
NULL
plots
plots <- ggplot(tesaurus,aes(x = cumulative_x, y = cumulative_y))+
geom_point()+
geom_label(aes(label = plot))+
NULL
plots
plots <- ggplot(tesaurus,aes(x = cumulative_x, y = cumulative_y))+
geom_point()+
geom_label(aes(label = plot))+
xlab("x")+
ylab("y")+
NULL
plots
install.packages("corpcor")
`annual.plant.model` <- function(n, alphas, lbes){
n <- n * ((1 - lbes$g)*lbes$s + (lbes$g*lbes$lambda)/(1 + alphas %*% (lbes$g * n)))
return(n)
}
`annual.plant.jacobian` <- function(n, alphas, lbes){
jac <- matrix(0,nrow(alphas),ncol(alphas))
for(i in 1:nrow(alphas)){
for(j in 1:nrow(alphas)){
# all entries get this
jac[i,j] <- -1 * alphas[i,j] * lbes$g[j] * lbes$g[i] * lbes$lambda[i] / ((1 + sum(alphas[i,] %*% (lbes$g * n)))**2)
# diagonal entries have another two terms
if(i == j){
jac[i,j] <- jac[i,j] + (1 - lbes$g[i]) * lbes$s[i] + lbes$g[i] * lbes$lambda[i] / (1 + sum(alphas[i,] %*% (lbes$g * n)))
}
}
}
return(jac)
}
# setwd("/Users/oscargodoy/Documents/Juan de la Cierva/Experimento La Hampa/RESULTS")
#epsilon <- (.Machine$double.eps)
# for pseudoinverse below
require(corpcor)
require(reshape)
# read in the pairwise competition coefficients
pairwise_alphas <- as.matrix(read.table('/home/david/Work/Projects/EBD/other code/multispecies_coex/alpha_estimates_row_is_target_control.csv',sep=",",row.names=1,header=T))
# read in the "general" parameter values
lbes <- read.table('/home/david/Work/Projects/EBD/other code/multispecies_coex/lambda_estimates_control.csv',sep=",",row.names=1, header=T)
head(pairwise_alphas)
head(lbes)
pw_equils <- data.frame()
pw_stabil <- data.frame()
for(nspecies in 2:10){
message(paste("Analyzing combos of size ",nspecies,"..."),appendLF=FALSE)
# figure out what the different combinations are
combos <- t(combn(rownames(lbes),nspecies))
# create a place to store the info about equilibrium abundances
pw_eq <- data.frame(row.names=apply(combos,1,paste,collapse="."))
# add placeholders for the abundances of the different species
for(sp in sort(rownames(lbes))){
pw_eq[,sp] <- NA
}
# and somewhere to store stability info
pw_st <- data.frame(row.names=apply(combos,1,paste,collapse="."))
pw_st$stable <- FALSE
for(s in 1:nrow(combos)){
species <- combos[s,]
if(!any(is.na(pairwise_alphas[species,species]))){
A <- pairwise_alphas[species,species]
b <- lbes[species,"eta"] - 1
x <- try(solve(A,b))
if(class(x) == "try-error")
x <- try(pseudoinverse(A) %*% b,silent=TRUE)
N <- x / lbes[species,"germination"]
pw_eq[s,species] <- N
# determine if the equilbria is stable
jaco <- annual.plant.jacobian(N, A, lbes[species,])
eig <- eigen(jaco)
max_eig <- max(abs(eig$values))
pw_st[s,"stable"] <- (max_eig<1)
}
}
message("done.")
pw_equils <- rbind(pw_equils,pw_eq)
pw_stabil <- rbind(pw_stabil,pw_st)
rm(pw_eq,pw_st)
}
head(pw_equils)
head(pw_stabil)
pw_equils_stabil <-cbind(pw_stabil, pw_equils)
coex_pw_equils <- pw_equils_stabil[rowSums(is.na(pw_equils_stabil[,2:11]))!= ncol(pw_equils_stabil[,2:11]),]
#Remove rows with negative abundances, thus no coexistence possible.
coex_pw_equils[is.na(coex_pw_equils)] <- 0
coex_pw_equils <- coex_pw_equils[apply(coex_pw_equils,1,function(x) all(x>=0)),]
head(coex_pw_equils)
View(coex_pw_equils)
View(pw_equils_stabil)
View(pairwise_alphas)
View(lbes)
install.packages("mvabund")
install.packages("mvabund")
source('~/Work/Projects/EBD/other code/multispecies_coex/doi_10.5061_dryad.8v13t2q__v1/estimate.parameters.R', echo=TRUE)
source('~/Work/Projects/EBD/other code/multispecies_coex/doi_10.5061_dryad.8v13t2q__v1/estimate.parameters.R', echo=TRUE)
model.parameters[["Open"]][["H.glutinosum"]]
metrics.plot <-
ggplot(network.metrics.plot, aes(simulation, value, fill = effect)) +
stat_summary(geom = "bar", fun.y = mean, position = position = position_dodge2(preserve = "single"), color = "grey20") +
stat_summary(geom = "errorbar", fun.data = mean_sdl,
width = 0.3,
position = position_dodge(.9),
color = "grey20")+
facet_wrap(~metric,scales = "free_y") +
# scale_fill_manual(values = c("grey30","grey70"))+
# scale_fill_manual(values = cbPalette[c(5,7)])+
scale_fill_manual(values = c("darkolivegreen","darkolivegreen3"))+
scale_x_discrete(labels = sim.labels) +
xlab("") + ylab("metric value") +
DGC::theme_Publication()+
theme(strip.background = element_blank()) +
guides(fill = FALSE)+
NULL
devtools::document()
getwd()
setwd("/home/david/Work/Projects/EBD/nota_AEET/paqueteR/")
devtools::document()
devtools::build()
install.packages("knitcitations")
setwd("/home/david/Work/Projects/EBD/nota_AEET/paqueteR/")
setwd("~/Work/Projects/EBD/nota_AEET")
setwd("~/Work/Projects/EBD/nota_AEET/paqueteR")
setwd("~/Work/Projects/EBD/nota_AEET")
